//CROSS JOIN
//Returns every possible combination of rows from the left and right tables
//Like an outer join with no conditions for joining

SELECT p1.product_id, p1.model, p2.product_id, p2.model
FROM products p1
CROSS JOIN products p2;


//Find all customers who bought a car and have a valid phone number

SELECT c.customer_id, c.first_name, c.last_name, c.phone
FROM sales s
INNER JOIN customers c
ON c.customer_id=s.customer_id
INNER JOIN products p ON p.product_id=s.product_id
WHERE p.product_type='automobile'
AND c.phone IS NOT NULL;

//Subqueries

SELECT *
FROM salespeople
INNER JOIN (
SELECT * FROM dealerships
WHERE dealerships.state ='CA') d
ON d.dealership_id = salespeople.dealership_id
ORDER BY 1;

//If the query only has one column for the subquery, use the WHERE clause in the keyword

SELECT *
FROM salespeople
WHERE dealership_id IN (
SELECT dealership_id FROM dealerships
WHERE dealerships.state = 'CA')
ORDER BY 1;

//Union - adding data horizontally

(SELECT street_address, city, state, postal_code
FROM customers
WHERE street_address IS NOT NULL
)
UNION
(SELECT street_address, city, state, postal_code
FROM dealerships
WHERE street_address IS NOT NULL
)
ORDER BY 1;


UNION customers and employees, and finding employees with an inner join that are in LA
(SELECT first_name, last_name, 'Customer' as guest_type
FROM customers
WHERE city = 'Los Angeles'
AND state = 'CA'
)
UNION
(SELECT first_name, last_name, 'Employee' as guest_type
FROM salespeople s
INNER JOIN dealerships d on d.dealership_id=s.dealership_id
WHERE d.city = 'Los Angeles'
AND d.state='CA'
)
ORDER BY 1;


//Common Table Expressions (CTE)
//Like subqueries, CTE establish temporary tables by using the WITH clause
//CTE are recursive, they can reference themselves
WITH d AS (
SELECT * FROM dealerships
WHERE dealerships.state='CA')
SELECT *
FROM salespeople
INNER JOIN d on d.dealership_id = salespeople.dealership_id
ORDER BY 1;


//CASE WHEN (If else)
SELECT c.customer_id,
CASE WHEN c.state IN ('MA', 'NH', 'VT') THEN 'New England'
WHEN c.state IN ('GA', 'FL', 'MS') THEN 'SouthEast'
ELSE 'Other' END
AS region
FROM customers c
ORDER BY 1;


//COALESCE
//Replace null values with a standard value, if the first value is null, fill with the 2nd value, it will continue down until a non-null value
//If all values are null, then the function returns a null
//Replace null values with "no phone"
//Good for creating default values avoiding null
SELECT first_name, last_name,
COALESCE(phone, 'No Phone') as phone
FROM customers
ORDER BY 1;

//NULLIF
//Opposite of Coalesce, returns null if the first value equals the second value
//Replace certain words with a NULL
SELECT customer_id,
NULLIF(title, 'Honorable') as title
FROM customers

GROUP BY
SELECT nerc_region, SUM(demand_loss_mw) AS demand_loss
FROM grid
WHERE demand_loss_mw IS NOT NULL
GROUP BY nerc_region
ORDER BY demand_loss DESC

//Try to remember that WHERE is applied before GROUP BY and filters on rows. HAVING is applied after GROUP BY, and filters on the groups or aggregates you created within the query.
HAVING
SELECT
nerc_region,
SUM (demand_loss_mw) AS demand_loss
FROM
grid
-- Remove the WHERE clause

GROUP BY
nerc_region
-- Enter a new HAVING clause so that the sum of demand_loss_mw is greater than 10000
HAVING
SUM(demand_loss_mw) > 10000
ORDER BY
demand_loss DESC;
A WHERE clause wouldn't work because we are applying the filter based on an aggregate value - in this example, the count of entries by each country. That completes this chapter. Now we move on to learning how to SELECT data from more than one table
HAVING
SELECT
country,
COUNT (country) AS country_count,
AVG (place) AS avg_place,
AVG (points) AS avg_points,
MIN (points) AS min_points,
MAX (points) AS max_points
FROM
eurovision
GROUP BY
country
-- The country column should only contain those with a count greater than 5
HAVING
COUNT(country) > 5
-- Arrange columns in the correct order
ORDER BY
avg_place,
avg_points DESC;



//HAVING a great time
//In SQL, aggregate functions can't be used in WHERE clauses. For example, the following query is invalid:

SELECT release_year
FROM films
GROUP BY release_year
WHERE COUNT(title) > 10;
This means that if you want to filter based on the result of an aggregate function, you need another way! That's where the HAVING clause comes in. For example,
SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 10;
shows only those years in which more than 10 films were released.


SELECT release_year, AVG(budget)
AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE (release_year = 2004 OR release_year = 2005)
GROUP BY release_year
HAVING AVG(budget) > 60000000;


SELECT release_year, AVG(budget)
AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000


SELECT country, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
Get the country, average budget, and average gross take of countries that have made more than 10 films. Order the result by country name, and limit the number of results displayed to 5. You should alias the averages as avg_budget and avg_gross respectively.
GROUP BY country
HAVING COUNT(title) > 10
ORDER BY country
LIMIT 5;

//CASE WHEN
//Simple Case
SELECT Name,
CASE Size
WHEN 'S' THEN 'Small'
WHEN 'M' THEN 'Medium
--etc.
ELSE ISNULL(Size, 'n/a')
END AS ProductSize
FROM SalesLT.Product;

//Max Cast
Select FirstName, LastName, SSN
, Max(Cast(ApplyLWSD as int)) as LWSD
,  Max(Cast(ApplyDisabled as int)) as Disability
, Max(Cast(ApplyElderly as int)) as Elderly
, Max(Cast(ApplyFamily as int)) as Family
, Max(Cast(ApplyVAM as int)) as VAM
From WaitListApplication
Group By FirstName, LastName, SSN
